<?php


/**
 * Implementation of hook_services_resources_alter().
 */
function services_view_resource_services_resources_alter(&$resources, $endpoint) {
  $resources['node']['relationships']['view'] = array(
    'file' => array(
      'type' => 'inc', 
      'module' => 'services_view_resource',
      'name' => 'resources/node',
    ),
    'help' => t('View node content.'),
    'access callback' => '_node_resource_access',
    'access arguments' => array('view'),
    'access callback file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
    'access arguments append' => TRUE,
    'callback' => 'services_view_resource_node_view',
    'args' => array(
      array(
        'name' => 'nid',
        'optional' => FALSE,
        'source' => array('path' => 0),
        'type' => 'int',
        'description' => 'The nid of the node to view',
      ),
      array(
        'name' => 'build_mode',
        'type' => 'string',
        'description' => t('Build mode of node. Defaults to services_view_resource.'),
        'source' => array('param' => 'build_mode'),
        'optional' => TRUE,
      ),
      array(
        'name' => 'as_page',
        'type' => 'string',
        'description' => t('Set false if do not want return wrapped in basic page html.'),
        'source' => array('param' => 'as_page'),
        'optional' => TRUE,
      ),
    ),
  );
  if (module_exists('comment')) {
    $resources['comment']['relationships']['view'] = array(
      'file' => array(
        'type' => 'inc', 
        'module' => 'services_view_resource',
        'name' => 'resources/comment',
      ),
      'help' => t('View comment content.'),
      'access callback' => '_comment_resource_access',
      'access arguments' => array('view'),
      'access callback file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/comment_resource'),
      'access arguments append' => TRUE,
      'callback' => 'services_view_resource_comment_view',
      'args' => array(
        array(
          'name' => 'cid',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'int',
          'description' => 'The cid of the comment to view',
        ),
        array(
          'name' => 'as_page',
          'type' => 'string',
          'description' => t('Set false if do not want return wrapped in basic page html.'),
          'source' => array('param' => 'as_page'),
          'optional' => TRUE,
        ),
      ),
    );
  }
  $resources['user']['relationships']['view'] = array(
    'file' => array(
      'type' => 'inc', 
      'module' => 'services_view_resource',
      'name' => 'resources/user',
    ),
    'help' => t('View user profile.'),
    'callback' => 'services_view_resource_user_view',
    'access callback file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
    'access callback' => '_user_resource_access',
    'access arguments' => array('view'),
    'access arguments append' => TRUE,
    'args' => array(
      array(
        'name' => 'uid',
        'type' => 'int',
        'description' => 'The uid of the user to retrieve.',
        'source' => array('path' => '0'),
        'optional' => FALSE,
      ),
      array(
        'name' => 'as_page',
        'type' => 'string',
        'description' => t('Set false if do not want return wrapped in basic page html.'),
        'source' => array('param' => 'as_page'),
        'optional' => TRUE,
      ),
    ),
  );
}

/**
 * Implementation of hook_content_build_modes().
 */
function services_view_resource_content_build_modes() {
  return array(
    'services_view_resource' => array(
      'title' => t('Services node view resource'), 
      'build modes' => array(
        'services_view_resource' => array(
          'title' => t('Services node view resource'), 
          'views style' => FALSE,
        ),
      ),
    ), 
  );
}

/**
 * Implementation of hook_theme().
 */
function services_view_resource_theme() {
  $themes = array(
    'services_view_resource_page' => array(
      'arguments' => array('content' => ''),
      'template' => 'services_view_resource_page',
    ),
  );
  return $themes;
}

/**
 *  Display the view in a simplified template
 */
function template_preprocess_services_view_resource_page(&$variables) {
  // Tell admin, admin_menu, etc. to supress their output.
  module_invoke_all('suppress');

  $variables['language']          = $GLOBALS['language'];
  $variables['language']->dir     = $GLOBALS['language']->direction ? 'rtl' : 'ltr';
  // Construct page title
  if (drupal_get_title()) {
    $variables['head_title'] = array(strip_tags(drupal_get_title()), variable_get('site_name', 'Drupal'));
  }
  else {
    $variables['head_title'] = array(variable_get('site_name', 'Drupal'));
    if (variable_get('site_slogan', '')) {
      $variables['head_title'][] = variable_get('site_slogan', '');
    }
  }
  $variables['head_title'] = implode(' | ', $variables['head_title']);
  $variables['head'] = drupal_get_html_head();
  $variables['css'] = drupal_add_css();
  $variables['styles'] = drupal_get_css();
  $variables['scripts'] = drupal_get_js();
  $variables['closure'] = theme('closure');
}

/**
 * Prepares the return result, rendering as page if requested.
 *
 * @param $content
 *   the rendered content.
 * @param $as_page
 *   Render the result as a page.
 */
function services_view_resource_prepare_result($content, $as_page = TRUE) {
  if ($as_page) {
    return theme('services_view_resource_page', $content);
  }
  return $content;
}
